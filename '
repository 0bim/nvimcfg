return {
    "VonHeikemen/lsp-zero.nvim",
    dependencies = {
        "neovim/nvim-lspconfig",
        "williamboman/mason.nvim",
        "williamboman/mason-lspconfig.nvim",
        "hrsh7th/nvim-cmp",
        "hrsh7th/cmp-buffer",
        "hrsh7th/cmp-path",
        "saadparwaiz1/cmp_luasnip",
        "hrsh7th/cmp-nvim-lsp",
        "hrsh7th/cmp-nvim-lua",
        "L3MON4D3/LuaSnip",
        "rafamadriz/friendly-snippets",
        { "lukas-reineke/lsp-format.nvim", config = true },
        {
            'mrcjkb/rustaceanvim',
            version = '^4', -- Recommended
            config = function()
            end,
        }
    },
    config = function()
        local lsp = require("lsp-zero")
        lsp.preset("recommended")
        lsp.on_attach(function(client, bufnr)
            require("lsp-format").on_attach(client, bufnr)
        end)
        lsp.setup()
        vim.diagnostic.config { virtual_text = true }

        local mason = require("mason")
        mason.setup({})

        local mason_lspconfig = require("mason-lspconfig")
        mason_lspconfig.setup({
            ensure_installed = {
                "rust_analyzer",
                "pyright",
                "typst_lsp",
                "clangd",
            },
            handlers = {
                function(server_name)
                    if server_name ~= "rust_analyzer" then
                        require("lspconfig")[server_name].setup({})
                    else
                        local opts = { noremap = true, silent = true }
                        vim.g.rustaceanvim.server.on_attach(function()
                            vim.api.nvim_buf_set_keymap(0,
                                "n",
                                "<leader>a",
                                "<cmd>lua require('rustaceanvim').runnables()<CR>",
                                opts
                            )
                            -- hover actions keymap
                            vim.api.nvim_buf_set_keymap(0,
                                "n",
                                "<leader>k",
                                "<cmd>lua vim.lsp.buf.hover()<CR>",
                                opts
                            )
                        end)

                        vim.g.rustaceanvim = {
                            server = {
                                cmd = function()
                                    local mason_registry = require('mason-registry')
                                    local ra_binary = mason_registry.is_installed('rust-analyzer')
                                        -- This may need to be tweaked, depending on the operating system.
                                        and mason_registry.get_package('rust-analyzer'):get_install_path() ..
                                        "/rust-analyzer"
                                        or "rust-analyzer"
                                    return { ra_binary } -- You can add args to the list, such as '--log-file'
                                end,
                            },
                        }

                        vim.g.rustaceanvim = function()
                            -- Update this path
                            local extension_path = vim.env.HOME .. '/.vscode/extensions/vadimcn.vscode-lldb-1.10.0/'
                            local codelldb_path = extension_path .. 'adapter/codelldb'
                            local liblldb_path = extension_path .. 'lldb/lib/liblldb'
                            local this_os = vim.uv.os_uname().sysname;

                            -- The path is different on Windows
                            if this_os:find "Windows" then
                                codelldb_path = extension_path .. "adapter\\codelldb.exe"
                                liblldb_path = extension_path .. "lldb\\bin\\liblldb.dll"
                            else
                                -- The liblldb extension is .so for Linux and .dylib for MacOS
                                liblldb_path = liblldb_path .. (this_os == "Linux" and ".so" or ".dylib")
                            end

                            local cfg = require('rustaceanvim.config')
                            return {
                                dap = {
                                    adapter = cfg.get_codelldb_adapter(codelldb_path, liblldb_path),
                                },
                            }
                        end
                    end
                end
            }
        })

        local opts = { noremap = true, silent = true }
        vim.api.nvim_create_autocmd("LspAttach", {
            group = vim.api.nvim_create_augroup("UserLspConfig", {}),
            callback = function(args)
                local client = vim.lsp.get_client_by_id(args.data.client_id)
                if client.server_capabilities.inlayHintProvider then
                    vim.lsp.inlay_hint.enable(true, nil)
                end

                -- mappings
                vim.api.nvim_buf_set_keymap(0, "n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
                vim.api.nvim_buf_set_keymap(0, "n", "gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", opts)
                vim.api.nvim_buf_set_keymap(0, "n", "ga", "<cmd>lua vim.lsp.buf.code_action()<CR>", opts)
            end
        })
    end
}
